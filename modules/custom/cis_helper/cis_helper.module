<?php
/**
 * @file
 * Workflow and functionality glue based on the structure of the CIS.
 */
define('CIS_HELPER_COURSE_SERVICE', 'course');
define('CIS_HELPER_JOB_PATH', '/var/wwwjobs');
define('CIS_HELPER_DEFAULT_AUTHENTICATION', 'open');
define('CIS_HELPER_DEFAULT_CONTENT_OUTLINE', 'lesson-based.xml');

/**
 * Implements hook_init().
 */
function cis_helper_init() {
  drupal_add_css(drupal_get_path('module', 'cis_helper') .'/css/cis_helper.css');
  // special js for hiding / displaying groups of form fields
  if (arg(0) == 'cis-quick-setup') {
    drupal_add_js(drupal_get_path('module', 'cis_helper') .'/js/cis_helper.js');
  }
}

/**
 * Implements hook_menu().
 */
function cis_helper_menu() {
  $items = array();
  $path = drupal_get_path('module', 'cis_helper');
  // admin settings for CIS
  $items['admin/config/system/cis'] = array(
    'title' => 'CIS',
    'description' => 'Course Information System configuration',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('cis_helper_admin_settings'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'cis_helper.admin.inc',
    'file path' => $path,
  );
  // quick setup form
  $items['cis-quick-setup'] = array(
    'title' => 'Section Setup',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('cis_helper_quick_setup_page'),
    'access arguments' => array('access cis setup form'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'cis_helper.pages.inc',
    'file path' => $path,
  );
  return $items;
}

/**
 * Implements hook_permission()
 */
function cis_helper_permission() {
    return array(
    'access cis setup form' =>  array(
      'title' => t('Access CIS Quick setup form'),
    ),
    'cis setup admin options' => array(
      'title' => t('Access administrative options on setup form'),
    ),
  );
}

/**
 * Implements hook_draw_chart_alter().
 */
function cis_helper_draw_chart_alter(&$settings) {
  $dept_charts = array('historical-college-data-page-4', 'historical-college-data-page-6');
  foreach ($dept_charts as $view_name) {
    if (isset($settings['chart'][$view_name])) {
      foreach ($settings['chart'][$view_name]['header'] as $record) {
        $data = db_select('field_data_field_abbreviation', 'fdfa')
        ->fields('fdfa', array('entity_id'))
        ->condition('field_abbreviation_value', substr($record, 0, strpos($record, ' (')))
        ->execute()
        ->fetchObject();
        if (isset($data->entity_id)) {
          $dept = node_load($data->entity_id);
          if (isset($dept->field_color[LANGUAGE_NONE][0]['jquery_colorpicker'])) {
            $colors[] = $dept->field_color[LANGUAGE_NONE][0]['jquery_colorpicker'];
          }
        }
      }
      $settings['chart'][$view_name]['options']['colors'] = $colors;
    }
  }
}

/**
 * Implements hook_form_alter().
 */
function cis_helper_form_alter(&$form, $form_state, $form_id) {
  // alterations for the section field collection
  if ($form_id == 'field_collection_item_form' && $form['#entity']->field_name == 'field_sections') {
    // return all service instances this section will have access to
    $service_instances = _cis_helper_derive_service_instances($form['#entity']->item_id);
    // load each service related to the instances found
    foreach ($service_instances as $instance) {
      $service = node_load($instance->field_services[LANGUAGE_NONE][0]['target_id']);
      // handle each service instance's data differently
      switch ($service->field_machine_name[LANGUAGE_NONE][0]['value']) {
        case CIS_HELPER_COURSE_SERVICE:
          // for course this is a json containing the different outlines as uuid => title
          $options = drupal_json_decode($instance->field_service_data[LANGUAGE_NONE][0]['value']);
          // create a visible version of the hidden field
          $form['_field_instructional_outline'] = array(
            '#type' => 'select',
            '#options' => $options,
            '#required' => TRUE,
            '#title' => t('Instructional outline'),
            '#description' => t('Which outline would you like this section to use'),
            '#default_value' => $form['field_instructional_outline'][LANGUAGE_NONE][0]['value']['#default_value'],
            '#weight' => 1,
          );
          // add this to the setup fieldset
          $form['#group_children']['_field_instructional_outline'] = 'group_setup';
          // load associated js to set the value of the hidden field
          drupal_add_js(drupal_get_path('module', 'cis_helper') . '/js/instructional_outline.js');
        break;
      }
    }
  }
  // allow for select style output for fields in data table
  if ($form_id == 'views_exposed_form' && strpos($form['#id'], 'historical-college-data-')) {
    $form['location'] = array(
      '#type' => 'select',
      '#options' => cis_helper_get_data_values('location'),
    );
    $form['semester'] = array(
      '#type' => 'select',
      '#options' => cis_helper_get_data_values('semester'),
    );
    $form['year'] = array(
      '#type' => 'select',
      '#options' => cis_helper_get_data_values('year'),
    );
    $form['course'] = array(
      '#type' => 'select',
      '#options' => cis_helper_get_data_values('course'),
    );
  }
}
/**
 * Implements hook_entity_insert().
 */
function cis_helper_entity_insert($entity, $type) {
  // check to see if a service_instance is being inserted
  if ($type == 'node' && $entity->type == 'service_instance') {
    // set the entity reference field to course    
    global $user;
    // generally a bad idea to pass around the user global
    $account = $user;
    // only run if we have services to process
    if (!empty($entity->field_services[LANGUAGE_NONE])) {
      // load service node
      $serv_node = node_load($entity->field_services[LANGUAGE_NONE][0]['target_id']);
      // load the course node
      $course_node = node_load($entity->field_course[LANGUAGE_NONE][0]['target_id']);
      // get current college machine name
      $college = variable_get('cis_college_name', '');
      // service name from machine name
      _cis_helper_add_service_instance($course_node, $serv_node, $entity, $college, $account);
    }
  }  
}

/**
 * Implements hook_entity_update().
 */
function cis_helper_entity_update($entity, $type) {
  // check to see if a service_instance is being updated
  if ($type == 'node' && $entity->type == 'service_instance') {
    if (!empty($entity->field_course[LANGUAGE_NONE])) {
      // see if there's an entity field query to match this uuid
      // this will only be triggered by remote service account PUT operations
      $query = new EntityFieldQuery;
      $result = $query
        // pull all field collections
        ->entityCondition('entity_type', 'field_collection_item')
        // that are offerings
        ->entityCondition('bundle', 'field_sections')
        // where the section is the one asked for
        ->fieldCondition('field_instructional_outline', 'value', $entity->uuid, '=')
        // run the query as user 1
        ->addMetaData('account', user_load(1))
        ->execute();
      // only run this setup portion if we have 1 item
      if (isset($result['field_collection_item']) && count($result['field_collection_item']) == 1) {
        $item = array_keys($result['field_collection_item']);
        // load the section
        $sections = entity_load('field_collection_item', $item);
        $section = array_pop($sections);
        // service data
        $data = drupal_json_decode($entity->field_service_data[LANGUAGE_NONE][0]['value']);
        // ensure we have an array
        if (is_array($data)) {
          // keys are uuids in this case
          $uuids = array_keys($data);
          // we only want 1 though only 1 should ever exist
          $uuid = array_pop($uuids);
        }
        // set section's instructional outline to the service entity's only item (if it has one)
        $section->field_instructional_outline[LANGUAGE_NONE][0]['value'] = $uuid;
        // save the section
        $section->save();
      }
    }
  }  
}

/**
 * Helper to pull list of possible values.
 */
function cis_helper_get_data_values($column) {
  // pull from historical course data table
  $result = db_select('historical_course_data', 'hcd')
  ->fields('hcd', array($column))
  ->orderBy($column)
  ->distinct()
  ->execute();
  // build default null option for empty text
  $options = array('' => '');
  // biuld array
  foreach ($result as $item) {
    $options[$item->{$column}] = $item->{$column};
  }
  return $options;
}

/**
 * Helper function to trigger cron based service creation
 */
function _cis_helper_add_service_instance($course, $service, $service_instance, $college, $account) {
  $options = array();
  // load optional cis_helper defined values
  $extra_options = variable_get('cis_build_' . $course->field_method_of_access[LANGUAGE_NONE][0]['value'], '');
  if (!empty($extra_options)) {
    $extra_options = explode(',', $extra_options);
    // only allow for enabling options from system variable
    $options['en'] = $extra_options;
  }
  // only enable activation codes on the course based service
  if ($service->field_machine_name[LANGUAGE_NONE][0]['value'] == CIS_HELPER_COURSE_SERVICE && $course->field_method_of_access[LANGUAGE_NONE][0]['value'] == 'code') {
    $options['en'][] = 'cis_service_activation_codes';
  }
  // service connection is required to talk back to this site
  $options['en'][] = 'cis_service_connection';
  // ux has the block position settings
  $options['en'][] = 'cis_service_connection_ux';
  // vset the uuid from the service_instance entity into the remote site
  $options['vset'][] = 'cis_service_instance_uuid ' . $service_instance->uuid;
  // disable site auto-cron run so admin can set policy globally
  $options['vset'][] = 'cron_safe_threshold 0';
  // allow for advanced drush alterations via code
  drupal_alter('cis_service_instance_options', $options, $course, $service);
  // build space name based on the requested title
  $space_name = $course->field_machine_name[LANGUAGE_NONE][0]['value'];
  // create a file based on service name
  $filename = $space_name . '.' . $service->field_machine_name[LANGUAGE_NONE][0]['value'];
  // set title to name of course
  $site_title = $course->title;
  // formulate the pattern of the file to what the job wants
  // site symlink to build
  $content = $space_name . "\n";
  // college requesting for dbo / db name
  $content .= $college . "\n";
  // title to set for the site name value
  $content .= $site_title  . "\n";
  // slogan value for the course
  $content .= $course->field_course_title[LANGUAGE_NONE][0]['value'] . "\n";
  // email / user requesting account
  $content .= $account->mail . "\n";
  // add distribution to create
  $content .= $service->field_distribution[LANGUAGE_NONE][0]['value'] . "\n";
  // process potential drush operation lists
  $fr = '';
  foreach ($options as $op => $commands) {
    // write each command to the file for this operation
    $tmp = '';
    foreach ($commands as $command) {
      $tmp .= 'drush ' . $op . ' ' . $command . "\n";
    }
    // hold off on fr to after all other operations
    if ($op != 'fr') {
      $content .= $tmp;
    }
    else {
      $fr = $tmp;
    }
  }
  // push feature revert requests off til the end
  // this way they actually revert instead of vset / en disrupting them
  $content .= $fr;
  // only apply default content import for course based service
  if ($service->field_machine_name[LANGUAGE_NONE][0]['value'] == CIS_HELPER_COURSE_SERVICE) {
    // allow for on creation population of material
    $content .= 'drush feeds-import --verbose feeds_node_helper_book_import --file=' . $service_instance->field_service_data[LANGUAGE_NONE][0]['value'] . "\n";
  }
  // write drush commands to flush all caches
  $content .= 'drush cc all' . "\n";
  // run the cron as a final clean up mechanism
  $content .= 'drush cron' . "\n";
  // write the structured file to a lower directory
  $handle = fopen(variable_get('cis_job_path', CIS_HELPER_JOB_PATH) . '/' . $filename, 'x+');
  fwrite($handle, $content);
  fclose($handle);
  // tell user about the service
  drupal_set_message(t('The "@service" service will be asked to create @space momentarily. You will be emailed when the job is complete.', array('@service' => $service->title, '@space' => $space_name)), 'status');
  // log service creation
  watchdog('cis_service', 'Service ' . $service->title . ' was told to be built for ' . $space_name);
}

/**
 * Helper function to return a section / offering's associated course
 * input is a field_collection_item id of a section and type to search for
 */
function _cis_helper_derive_parent($item_id, $field_collection_type = 'section', $find = 'course') {
  // additional level of searching for a section that matches
  if ($field_collection_type == 'section') {
    $query = new EntityFieldQuery;
    $result = $query
      // pull all field collections
      ->entityCondition('entity_type', 'field_collection_item')
      // that are offerings
      ->entityCondition('bundle', 'field_offerings')
      // where the section is the one asked for
      ->fieldCondition('field_sections', 'value', $item_id, '=')
      // run the query as user 1
      ->addMetaData('account', user_load(1))
      ->execute();
    $item = array_keys($result['field_collection_item']);
  }
  else {
    // entity load expects an array
    $item = array($item_id);
  }
  // load the offering
  $offerings = entity_load('field_collection_item', $item);
  $offering = array_pop($offerings);
  // allow for stopping here if we wanted offering
  if ($find == 'offering') {
    return $offering;
  }
  // pull the node associated to this offering
  $query = new EntityFieldQuery;
  $result = $query
    // pull all nodes
    ->entityCondition('entity_type', 'node')
    // that are courses
    ->entityCondition('bundle', 'course')
    // where the offering matches the one found
    ->fieldCondition('field_offerings', 'value', $offering->item_id, '=')
    // run the query as user 1
    ->addMetaData('account', user_load(1))
    ->execute();
  // load node of the course and return it
  return node_load(array_pop(array_keys($result['node'])));
}

/**
 * Helper function to generate options list of entities based on type
 */
function _cis_helper_assemble_entity_list($entity_type, $bundle, $id_field, $title_field) {
  // pull items based on bundle
  $options = array();
  // assemble all entities requested
  $query = new EntityFieldQuery;
  $result = $query
    ->entityCondition('entity_type', $entity_type)
    ->entityCondition('bundle', $bundle)
    ->propertyOrderBy($title_field)
    ->execute();
  // convert to load only keys of items found
  $etids = array_keys($result[$entity_type]);
  // load all the entities in the array
  $elist = entity_load($entity_type, $etids);
  // load entities and build array of id -> title
  foreach ($elist as $entity) {
    // allow for field value as key
    if (strpos($id_field, 'field_') !== FALSE) {
      $key = $entity->{$id_field}[LANGUAGE_NONE][0]['value'];
    }
    else {
      $key = $entity->{$id_field};
    }
    $options[$key] = $entity->{$title_field};
  }
  return $options;
}

/**
 * Returns all instructional outlines that are xml packages
 */
function _cis_helper_get_instructional_outlines() {
  $options = array();
  // allow for the inclusion of other instructional models
  drupal_alter('cis_instructional_outlines', $options);
  return $options;
}

/**
 * Implements hook_cis_instructional_outlines_alter().
 */
function cis_helper_cis_instructional_outlines_alter(&$outlines) {
  // lazy scan the included instructional models
  $directory = opendir(drupal_get_path('module', 'cis_helper') . '/instructional_models');
  $full_path = drupal_get_path('module', 'cis_helper') . '/instructional_models/';
  // get each item
  $files = array();
  while($file_name = readdir($directory)) {
    if (strpos($file_name, '.xml')) {
      // add the template to the list
      $files[$full_path . $file_name] = t('@name Instructional Outline', array('@name' => ucwords(str_replace('-', ' ', str_replace('.xml', '', $file_name)))));
    }
  }
  // close directory
  closedir($directory);
  // merge the located file outlines in with those present in the site
  $outlines = array_merge($outlines, $files);
}
/**
 * Derive service instances from an entity id.
 */
function _cis_helper_derive_service_instances($item_id, $course = NULL, $type = 'section') {
  // load course correctly
  if (is_null($course)) {
    switch ($type) {
      case 'section':
      case 'offering':
        // find related course
        $course = _cis_helper_derive_parent($item_id, $type);
      break;
      case 'course':
        $course = node_load($item_id);
      break;
      // unsupported operation
      default:
        return FALSE;
      break;
    }
  }
  // query to return all service instances for this course
  $query = new EntityFieldQuery;
  $result = $query
    // pull all nodes
    ->entityCondition('entity_type', 'node')
    // that are service instances
    ->entityCondition('bundle', 'service_instance')
    // where the course equals the current one
    ->fieldCondition('field_course', 'target_id', $course->nid, '=')
    // run the query as user 1
    ->addMetaData('account', user_load(1))
    ->execute();
  // load the instances
  if (isset($result['node'])) {
    return entity_load('node', array_keys($result['node']));
  }
  return FALSE;
}